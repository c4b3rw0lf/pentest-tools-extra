import os
import subprocess

# Check if directory exists, create it if necessary
def check_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

# Clone or pull git repos
def clone_or_pull(url, directory):
    if os.path.exists(os.path.join(directory, ".git")):
        print(f"Pulling {url}")
        subprocess.run(["git", "-C", directory, "pull"])
    else:
        print(f"Cloning {url}")
        subprocess.run(["git", "clone", url, directory])

# Pentest directory
base_dir = "/pentest"

# Categories and URLs
tools = {
    "exploitation": [
        "https://github.com/EgeBalci/amber",
        "https://github.com/Mr-Un1k0d3r/DKMC",
        "https://github.com/Mr-Un1k0d3r/DKMC",
        "https://github.com/TheWover/donut",
        "https://github.com/dreadlocked/Drupalgeddon2",
        "https://github.com/rithchard/Drupalgeddon3",
        "https://github.com/FSecureLABS/bsides18_breakfree",
        "https://github.com/00theway/Ghostcat-CNVD-2020-10487",
        "https://github.com/fox-it/mitm6",
        "https://github.com/guardicore/monkey",
        "https://github.com/trustedsec/unicorn",
        "https://github.com/RUB-NDS/PRET",
        "https://github.com/phamphuqui1998/CVE-2021-34473",
        "https://github.com/whitel1st/docem",
        "https://github.com/adipinto/HP-Data-Protector-RCE",
        "https://github.com/jthuraisamy/SysWhispers",
        "https://github.com/jthuraisamy/SysWhispers2",
        "https://github.com/klezVirus/SysWhispers3",
        "https://github.com/unipacker/unipacker",
        "https://github.com/trustedsec/nps_payload",
        "https://github.com/clr2of8/Commentator",
        "https://github.com/plackyhacker/Suspended-Thread-Injection",
        "https://github.com/d35ha/CallObfuscator",
        "https://github.com/optiv/ScareCrow",
        "https://github.com/pwntester/ysoserial.net",
        "https://github.com/frohoff/ysoserial",
        "https://github.com/0xsp-SRD/mortar",
        "https://github.com/S3cur3Th1sSh1t/OffensiveVBA",
        "https://github.com/phra/PEzor",
        "https://github.com/optiv/Freeze",
        "https://github.com/optiv/Ivy",
        "https://github.com/horizon3ai/proxyshell"
                
    ],
    "information-gathering": [
        "https://github.com/Tib3rius/AutoRecon",
        "https://github.com/CroweCybersecurity/ad-ldap-enum",
        "https://github.com/nyxgeek/o365recon",
        "https://github.com/internetwache/GitTools",
        "https://github.com/dirkjanm/ldapdomaindump",
        "https://github.com/hegusung/RPCScan",
        "https://github.com/smicallef/spiderfoot",
        "https://github.com/fleetcaptain/Turbolist3r",
        "https://github.com/ropnop/windapsearch",
        "https://github.com/HightechSec/git-scanner",
        "https://github.com/nccgroup/ScoutSuite",
        "https://github.com/ffuf/ffuf",
        "https://github.com/sc1341/InstagramOSINT",
        "https://github.com/twintproject/twint",
        "https://github.com/projectdiscovery/httpx",
        "https://github.com/sensepost/gowitness"
    ],
   
   "post-exploitation": [
        "https://github.com/BloodHoundAD/BloodHound",
        "https://github.com/Hackplayers/evil-winrm",
        "https://github.com/GoFetchAD/GoFetch",
        "https://github.com/offsecginger/koadic",
        "https://github.com/RedTeamOperations/PivotSuite",
        "https://github.com/byt3bl33d3r/SILENTTRINITY",
        "https://github.com/BlackArch/webshells",
        "https://github.com/S3cur3Th1sSh1t/WinPwn",
        "https://github.com/NetSPI/PowerUpSQL",
        "https://github.com/BC-SECURITY/Starkiller",
        "https://github.com/HavocFramework/Havoc",
        "https://github.com/BishopFox/sliver",
        
   ],

   "privilege escalation":  [
        "https://github.com/Mebus/cupp",
        "https://github.com/ohpe/juicy-potato",
        "https://github.com/rebootuser/LinEnum",
        "https://github.com/jondonas/linux-exploit-suggester-2",
        "https://github.com/TsukiCTF/Lovely-Potato",
        "https://github.com/Hackndo/lsassy",
        "https://github.com/foxglovesec/Potato",
        "https://github.com/danielmiessler/SecLists",
        "https://github.com/c4b3rw0lf/wordlist-collection",
        "https://github.com/mchoji/winrm-brute",
        "https://github.com/carlospolop/PEASS-ng",
        "https://github.com/unode/firefox_decrypt",
        "https://github.com/D4Vinci/elpscrk",

   ],


}

def print_categories():
    print("Available Categories:")
    for category in tools.keys():
        print(f"- {category}")

def main():
    while True:
        print_categories()
        category_choice = input("Enter the category you want to work with (or 'exit' to quit): ")
        if category_choice == "exit":
            break

        category_choice = category_choice.strip()
        if category_choice not in tools:
            print("Invalid category. Please choose a valid category.")
            continue

        category_dir = os.path.join(base_dir, category_choice)
        check_directory(category_dir)
        os.chdir(category_dir)

        urls = tools[category_choice]
        for url in urls:
            # Parse out repo name from URL for directory
            repo_name = os.path.splitext(os.path.basename(url))[0]
            clone_or_pull(url, repo_name)

if __name__ == "__main__":
    main()
  
